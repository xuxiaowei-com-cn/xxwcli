# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Push Branches

on:
  push:
    branches:
      - main

jobs:

  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      CACHE_PATH: ~/go/pkg/mod/cache
      # 系统名称
      OS: ""
      # 时间
      YEAR_MONTH_DAY: ""
      YEAR_MONTH_DAY_HOUR: ""
      YEAR_MONTH_DAY_HOUR_MINUTE: ""
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest", "macos-latest" ]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        id: set-up-go
        with:
          go-version: 1.19

      - name: Cache Go modules
        uses: actions/cache@v3
        id: cache-modules
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        run: |
          go version
          go mod download
          go build -ldflags "-X main.buildTime=$(date +%Y-%m-%d_%H:%M:%S%z) -X main.commitSha=$(git rev-parse HEAD) -X main.commitShortSha=$(git rev-parse --short HEAD) -X main.commitTimestamp=$(git log -1 --format="%cd" --date="format:%Y-%m-%d_%H:%M:%S%z")" xxwcli.go ||           go build -ldflags "-X main.buildTime=$(Get-Date -Format yyyy-MM-dd_HH:mm:ss%z) -X main.commitSha=$(git rev-parse HEAD) -X main.commitShortSha=$(git rev-parse --short HEAD) -X main.commitTimestamp=$(git log -1 --format="%cd" --date="format:%Y-%m-%d_%H:%M:%S%z")" xxwcli.go
          ./xxwcli -v || ./xxwcli.exe -v
          ./xxwcli v || ./xxwcli.exe v
          ls

      - name: Replace String Action
        uses: frabert/replace-string-action@v2
        id: replace
        with:
          pattern: '-latest$'
          string: ${{ matrix.os }}
          replace-with: ''

      - name: Set OS variable
        id: os
        run: |
          # 设置环境变量：支持 ubuntu、macos
          echo "OS=${{ steps.replace.outputs.replaced }}" >> $GITHUB_ENV
          # 设置环境变量：支持 windows
          echo "OS=${{ steps.replace.outputs.replaced }}" >> $env:GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: xxwcli-${{ env.OS }}
          path: |
            xxwcli
            xxwcli.exe

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # if: startsWith(github.ref, 'refs/heads/main')
    steps:

      - name: Get current date
        id: date
        # bash, sh, cmd, powershell, pwsh
        # shell 类型必须为 sh，否则：
        # $GITHUB_ENV：仅支持 ubuntu、macos
        # $env:GITHUB_ENV：仅支持 windows
        shell: sh
        run: |
          echo "YEAR_MONTH_DAY=$(date +'%Y-%m-%dZ')" >> $GITHUB_ENV
          echo "YEAR_MONTH_DAY_HOUR=$(date +'%Y-%m-%dT%HZ')" >> $GITHUB_ENV
          echo "YEAR_MONTH_DAY_HOUR_MINUTE=$(date +'%Y-%m-%dT%H-%MZ')" >> $GITHUB_ENV

      - name: Download Artifacts ubuntu
        uses: actions/download-artifact@v3
        with:
          name: xxwcli-ubuntu
          path: ubuntu

      - name: Download Artifacts windows
        uses: actions/download-artifact@v3
        with:
          name: xxwcli-windows
          path: windows

      - name: Download Artifacts macos
        uses: actions/download-artifact@v3
        with:
          name: xxwcli-macos
          path: macos

      - name: Copy & Rename
        run: |
          cp ./macos/xxwcli xxwcli-macos
          cp ./ubuntu/xxwcli xxwcli-ubuntu
          cp ./windows/xxwcli.exe xxwcli.exe

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            xxwcli-macos
            xxwcli-ubuntu
            xxwcli.exe
          body:
            自动推送时的发布
          # draft: 草稿状态，为 true 时，不创建标签，默认为 false
          # draft: true
          # prerelease：是否发布预发布版，默认为 false
          prerelease: true
          name: 0.0.1-${{ env.YEAR_MONTH_DAY_HOUR_MINUTE }}
          tag: v0.0.1-${{ env.YEAR_MONTH_DAY_HOUR_MINUTE }}
          token: ${{ secrets.GITHUB_TOKEN }}


  # https://docs.github.com/zh/enterprise-cloud@latest/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions
  dependabot:
    name: Dependabot
    # 需要所有 build 完成后，才运行
    needs: build
    runs-on: ${{ matrix.os }}
    permissions:
      # 可以修改仓库中的文件内容
      contents: write
      # # 可以新建或修改 Pull Request
      pull-requests: write
    # 依赖机器人 && 仅PR
    if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' }}

    strategy:
      matrix:
        os: [ "ubuntu-latest" ]

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # 获取所有的代码历史记录，包括分支和标签
          fetch-depth: 0

      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: echo
        run: |
          echo ${{ github.event.pull_request.html_url }}
          echo ${{ steps.metadata.outputs.dependency-names }}
          echo ${{ steps.metadata.outputs.update-type }}
          echo ${{ 'version-update:semver-patch' }}

      - name: Enable auto-merge for Dependabot PRs
        # if: ${{contains(steps.metadata.outputs.dependency-names, 'my-dependency') && steps.metadata.outputs.update-type == 'version-update:semver-patch'}}
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 将 main 分支代码同步到 极狐GitLab
      - name: Sync JihuLab
        run: |
          git config --global user.email "xuxiaowei@xuxiaowei.com.cn"
          git config --global user.name "徐晓伟"
          # 设置 SSH 秘钥
          mkdir -p ~/.ssh
          echo "${{ secrets.JIHULAB_ID_RSA }}" >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa
          # 信任域名
          ssh-keyscan -H jihulab.com >> ~/.ssh/known_hosts
          # 切换 main 分支
          git checkout main
          # 拉取 main 分支
          git pull origin main
          # 查看远端 极狐GitLab
          echo git@jihulab.com:$GITHUB_REPOSITORY.git
          # 添加远端 极狐GitLab
          git remote add jihulab git@jihulab.com:$GITHUB_REPOSITORY.git
          # 拉取 main 分支
          git pull --progress -v --no-rebase jihulab main
          # 推送 main 分支
          git push --progress jihulab main:main

  sync:
    name: Sync
    # 需要所有 build 完成后，才运行
    needs: build
    # 仅在推送代码时执行
    if: github.event_name == 'push'
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ "ubuntu-latest" ]

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # 获取所有的代码历史记录，包括分支和标签
          fetch-depth: 0

      # 将代码同步到 极狐GitLab
      - name: Sync JihuLab
        run: |
          git config --global user.email "xuxiaowei@xuxiaowei.com.cn"
          git config --global user.name "徐晓伟"
          # 设置 SSH 秘钥
          mkdir -p ~/.ssh
          echo "${{ secrets.JIHULAB_ID_RSA }}" >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa
          # 信任域名
          ssh-keyscan -H jihulab.com >> ~/.ssh/known_hosts
          # 查看当前分支
          echo 当前分支：$GITHUB_REF_NAME
          # 查看远端 极狐GitLab
          echo git@jihulab.com:$GITHUB_REPOSITORY.git
          # 添加远端 极狐GitLab
          git remote add jihulab git@jihulab.com:$GITHUB_REPOSITORY.git
          # 拉取
          git pull --progress -v --no-rebase jihulab $GITHUB_REF_NAME
          # 推送当前分支
          git push --progress jihulab $GITHUB_REF_NAME:$GITHUB_REF_NAME
